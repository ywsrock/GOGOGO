// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dic/v1/dic.proto

package dic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DicServiceClient is the client API for DicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DicServiceClient interface {
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
}

type dicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDicServiceClient(cc grpc.ClientConnInterface) DicServiceClient {
	return &dicServiceClient{cc}
}

func (c *dicServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/dic.v1.DicService/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DicServiceServer is the server API for DicService service.
// All implementations must embed UnimplementedDicServiceServer
// for forward compatibility
type DicServiceServer interface {
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	mustEmbedUnimplementedDicServiceServer()
}

// UnimplementedDicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDicServiceServer struct {
}

func (UnimplementedDicServiceServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedDicServiceServer) mustEmbedUnimplementedDicServiceServer() {}

// UnsafeDicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DicServiceServer will
// result in compilation errors.
type UnsafeDicServiceServer interface {
	mustEmbedUnimplementedDicServiceServer()
}

func RegisterDicServiceServer(s grpc.ServiceRegistrar, srv DicServiceServer) {
	s.RegisterService(&DicService_ServiceDesc, srv)
}

func _DicService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DicServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dic.v1.DicService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DicServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DicService_ServiceDesc is the grpc.ServiceDesc for DicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dic.v1.DicService",
	HandlerType: (*DicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _DicService_GetKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dic/v1/dic.proto",
}
